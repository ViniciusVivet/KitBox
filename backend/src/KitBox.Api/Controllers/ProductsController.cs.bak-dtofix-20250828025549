using KitBox.Application.Features.Products;
using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace KitBox.Api.Controllers;

[ApiController]
[Route("[controller]")]
[Authorize]
public sealed class ProductsController(IMediator mediator) : ControllerBase
{
    [HttpGet("{id}")]
    public async Task<IActionResult> GetById(string id, CancellationToken ct = default)
    {
        var product = await mediator.Send(new GetProductByIdQuery(id), ct);
        return product is null ? NotFound() : Ok(product);
    }

    public sealed record ProductDto(
        string Name,
        string? Description,
        string Category,
        decimal Price,
        int Quantity
    );

    [HttpPost]
    public async Task<IActionResult> Create([FromBody] ProductDto dto, CancellationToken ct = default)
    {
        var created = await mediator.Send(
            new CreateProductCommand(dto.Name, dto.Description, dto.Category, dto.Price, dto.Quantity), ct);

        return CreatedAtAction(nameof(GetById), new { id = created.Id }, created);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> Update(string id, [FromBody] ProductDto dto, CancellationToken ct = default)
    {
        var ok = await mediator.Send(
            new UpdateProductCommand(id, dto.Name, dto.Description, dto.Category, dto.Price, dto.Quantity), ct);

        return ok ? NoContent() : NotFound();
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> Delete(string id, CancellationToken ct = default)
    {
        var ok = await mediator.Send(new DeleteProductCommand(id), ct);
        return ok ? NoContent() : NotFound();
    }

    [HttpGet]
    public async Task<IActionResult> List(
        [FromQuery] string? name,
        [FromQuery] string? category,
        [FromQuery] decimal? minPrice,
        [FromQuery] decimal? maxPrice,
        [FromQuery] int page = 1,
        [FromQuery] int pageSize = 20,
        CancellationToken ct = default)
    {
        var result = await mediator.Send(new ListProductsQuery(
            name, category, minPrice, maxPrice, page, pageSize), ct);

        return Ok(result);
    }
}